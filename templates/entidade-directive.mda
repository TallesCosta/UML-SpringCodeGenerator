import java.util.*
import in.labulle.anycode.uml.*
import in.labulle.anycode.engine.groovy.directive.*

class Entidade {
	IClass c;
	List<IAttribute> attributesJava;
	List<IAttribute> attributesComplex;
	List<IAttribute> attributesList;

	def setup(IClass c) {
		this.c = c;
		this.attributesJava = new ArrayList<IAttribute>()
		this.attributesComplex = new ArrayList<IAttribute>()
		this.attributesList = new ArrayList<IAttribute>()

		c.attributes.each {
			// Attribute "primitive"
			if (it.getDataType().getOwner().getFullyQualifiedName(".") == "java") {
				// Class representes primiteves attributes
				attributesJava.push(it)
			}
			// Attribute is a relation? AND
			// Attribute is relation One-To-Many?
			else if (it.isRelation() && it.isOneToMany()) {
				// Multiple association attributes (List)
				attributesList.push(it)
			}
			// Attribute is a relation? AND
			// Attribute is relation One-To-One?
			else if (it.isRelation() && it.isOneToOne()) {
				// Simple association attributes
				attributesComplex.push(it)
			}
		}
	}

	def imports() {
		String result = "";
		result += "\nimport javax.persistence.Entity;";

		attributesJava.each {
			if (it.name == "id") {
				result += "\nimport javax.persistence.Id;";
			}
			if (it.dataType.name == "Date") {
				result += "\nimport java.util.Date;";
			}
		}

		if (!attributesJava.isEmpty()) {
			result += "\nimport javax.persistence.Column;";
		}

		if (!attributesComplex.isEmpty() || !attributesList.isEmpty()) {
			result += "\nimport javax.persistence.CascadeType;";
		}

		if (!attributesComplex.isEmpty()) {
			result += "\nimport javax.persistence.OneToOne;";
		}

		if (!attributesList.isEmpty()) {
			result += "\nimport javax.persistence.OneToMany;";
			result += "\n\nimport java.util.List;";
			result += "\nimport java.util.ArrayList;";
		}

		return "${result}\n";
	}

	def attributes() {
		if(attributesJava.isEmpty() && attributesComplex.isEmpty() && attributesList.isEmpty())
			return ""

		String result = "\t// Atributos"

		attributesJava.each {
			result += "\n\t${simpleAttrAnnotation(it)}\n"
			result += "\t${it.visibility.toString().toLowerCase()} ${it.dataType.name} ${it.name};\n"
		}

		attributesComplex.each {
			result += "\n\t${singleAttrAnnotation(it)}\n"
			result += "\t${it.visibility.toString().toLowerCase()} ${it.dataType.name} ${it.dataType.name.toLowerCase()};\n"
		}

		attributesList.each {
			result += "\n\t${multipleAttrAnnotation(it)}\n"
			result += "\t${it.visibility.toString().toLowerCase()} List<${it.dataType.name}> ${it.name};\n"
		}

		return "${result}\n"
	}

	def simpleAttrAnnotation(IAttribute attr) {
		if(attr.name == "id")
			return "@Id"
		return "@Column"
	}

	def singleAttrAnnotation(IAttribute attr) {
		return "@OneToOne(targetEntity = ${attr.dataType.name}.class, cascade = CascadeType.ALL)"
	}

	def multipleAttrAnnotation(IAttribute attr) {
		return "@OneToMany(targetEntity = ${attr.dataType.name}.class, cascade = CascadeType.ALL)"
	}

}